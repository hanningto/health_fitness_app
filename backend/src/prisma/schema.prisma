generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model food_types {
  food_type_id Int     @id @default(autoincrement())
  name         String  @unique(map: "name") @db.VarChar(50)
  description  String? @db.Text
}

model goals {
  goal_id      Int        @id @default(autoincrement())
  user_id      Int?
  goal_type    String     @db.VarChar(50)
  target_value Int
  start_date   DateTime   @db.Date
  end_date     DateTime   @db.Date
  users        users?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "goals_ibfk_1")
  progress     progress[]

  @@index([user_id], map: "user_id")
}

model meals {
  meal_id   Int       @id @default(autoincrement())
  user_id   Int?
  meal_date DateTime  @db.Date
  meal_time DateTime  @db.Time(0)
  food_type String    @db.VarChar(50)
  calories  Int
  notes     String?   @db.Text
  logged_at DateTime? @default(now()) @db.Timestamp(0)
  users     users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "meals_ibfk_1")

  @@index([user_id], map: "user_id")
}

model preset_workouts {
  preset_id   Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  type        String  @db.VarChar(50)
  duration    Int
  intensity   String? @db.VarChar(50)
  description String? @db.Text
}

model progress {
  progress_id    Int       @id @default(autoincrement())
  user_id        Int?
  goal_id        Int?
  progress_date  DateTime  @db.Date
  progress_value Int
  logged_at      DateTime? @default(now()) @db.Timestamp(0)
  users          users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "progress_ibfk_1")
  goals          goals?    @relation(fields: [goal_id], references: [goal_id], onDelete: Cascade, onUpdate: NoAction, map: "progress_ibfk_2")

  @@index([goal_id], map: "goal_id")
  @@index([user_id], map: "user_id")
}

model sleep_logs {
  sleep_id       Int       @id @default(autoincrement())
  user_id        Int?
  sleep_date     DateTime  @db.Date
  sleep_duration Int
  notes          String?   @db.Text
  logged_at      DateTime? @default(now()) @db.Timestamp(0)
  users          users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "sleep_logs_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  user_id      Int            @id @default(autoincrement())
  username     String         @unique(map: "username") @db.VarChar(50)
  password     String         @db.VarChar(255)
  email        String         @unique(map: "email") @db.VarChar(100)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  is_admin     Boolean?       @default(false)
  goals        goals[]
  meals        meals[]
  progress     progress[]
  sleep_logs   sleep_logs[]
  water_intake water_intake[]
  workouts     workouts[]
}

model water_intake {
  intake_id     Int       @id @default(autoincrement())
  user_id       Int?
  intake_date   DateTime  @db.Date
  intake_amount Int
  logged_at     DateTime? @default(now()) @db.Timestamp(0)
  users         users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "water_intake_ibfk_1")

  @@index([user_id], map: "user_id")
}

model workouts {
  workout_id Int       @id @default(autoincrement())
  user_id    Int?
  type       String    @db.VarChar(50)
  duration   Int
  intensity  String?   @db.VarChar(50)
  notes      String?   @db.Text
  logged_at  DateTime? @default(now()) @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "workouts_ibfk_1")

  @@index([user_id], map: "user_id")
}
